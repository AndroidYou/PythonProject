"""
 读和写文件
 open()将会返回一个file对象，基本语法格式如下：
 1. open(filename,mode)
  filename: 包含了你要访问的文件名称的字符串值
  mode：决定了打开文件的模式：只读，写入，追加等。
 2.模式 model
r  	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。
r+	打开一个文件用于读写。文件指针将会放在文件的开头。
rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

 3.f.read() 为了读取一个文件的内容，调用f.read(size),这将读取一定数目的数据，然后作为字符串或字节对象返回
 4.f.readLine() 从文件中读取单独的一行，换行符为'\n'。f.readLine() 如果返回一个空字符串，说明已经读到最后一行
 5.f.readLines() 返回该文件中包含的所有行
 6.f.write()  将string写入到文件中，然后返回写入的字符数
 7.f.tell() 返回文件对象当前所处的位置，它是从文件开头开始算起的字节数
 8.f.seek() 如果需要改变文件指针当前的位置，可以使用f.seek(offset,from_what)函数。

from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：

seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符
seek(x,1) ： 表示从当前位置往后移动x个字符
seek(-x,2)：表示从文件的结尾往前移动x个字符

  9.f.close() 关闭文件并释放系统的资源
  当处理一个文件对象时, 使用 with 关键字是非常好的方式。在结束后, 它会帮你正确的关闭文件。
  而且写起来也比 try - finally 语句块要简短:

 pickle模块
 Python的pickle模块实现了基本的数据序列和反序列化
 通过pickle模块的序列化操作 我们能够将程序中运行的对象信息保存到文件中去，永久存储。
 通过pickle模块的反序化操作，我们能够从文件中创建上一次程序保存的对象。
pickle.dump(obj, file, [,protocol])
有了pickle对象，就能对file以读取得形式打开
x = pickle.load(file)


"""
import pickle

if __name__ == '__main__':
    f = open("D:/python.text", "w")  # 第一个参数是打开的文件名，第二个参数是模式
    f.write("我喜欢下雨天")
    f.close()
    f = open("D:/python.text", "r")
    print(f.read())
    f.close()  # 我喜欢下雨天

    # 使用pickle模块将数据对象保存到文件
    data1 = {'a': [1, 23, 4], 'b': ("sreing", 'android', 'python'), 'c': None}
    selfref_list = [1, 2, 3]
    selfref_list.append(selfref_list)
    output = open("D:/data.pkl", 'wb')
    pickle.dump(data1, output)
    pickle.dump(selfref_list, output, -1)
    output.close()
    # 使用pickle模块从文件中重构对象
    pkl_file = open("D:/data.pkl",'rb')
    load = pickle.load(pkl_file)
    print(load)  # {'a': [1, 23, 4], 'b': ('sreing', 'android', 'python'), 'c': None}
    print(pickle.load(pkl_file)) # [1, 2, 3, [...]]
    pkl_file.close()
